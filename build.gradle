buildscript {
    repositories {
        mavenCentral()
        maven { url = "https://maven.aliyun.com/nexus/content/repositories/jcenter" }
        maven { url = "https://maven.aliyun.com/nexus/content/groups/public" }
        maven { url = "https://maven.aliyun.com/nexus/content/repositories/google" }
        maven { url = "https://repo.spongepowered.org/maven" }
        maven { url = "https://files.minecraftforge.net/maven" }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:5.+' //2.3-SNAPSHOT
        classpath 'org.spongepowered:mixingradle:0.7.+'
    }
}

apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'org.spongepowered.mixin'

mixin {
    add sourceSets.main, "mixins.rtmmetro.refmap.json"
    config "mixins.rtmmetro.json"
    add sourceSets.main, "mixins.rtmmetro_early.refmap.json"
    config "mixins.rtmmetro_early.json"
    debug.verbose = true
    debug.export = true
}

repositories {
    mavenCentral()
    maven { url = "https://maven.aliyun.com/nexus/content/repositories/jcenter" }
    maven { url = "https://maven.aliyun.com/nexus/content/groups/public" }
    maven { url = "https://maven.aliyun.com/nexus/content/repositories/google" }

    maven { url = "https://cursemaven.com" }
    maven { url = "https://repo.spongepowered.org/maven" }
    maven { url = "https://api.modrinth.com/maven" }
    maven { url = 'https://maven.cleanroommc.com' }
}

modId = property("modId").toString()
modName = property("modName").toString()
modDescription = property("modDescription").toString()
mcversion = property("mcversion").toString()
cursePage = property("cursePage").toString()
//version = property("version").toString().contains("snapshot") ? property("version").toString() + "_" + new Date().format("yyyyMMdd") : property("version").toString()
String versionFromSrc = file(getRootDir().toString() + "/src/main/java/net/cacpixel/rtmmetro/RTMMetro.java")
        .readLines().stream().filter { it.contains("public static final String VERSION") }
        .findFirst().get().split("\"")[1]
version = versionFromSrc.startsWith("0.") ? versionFromSrc + "_snapshot_" + new Date().format("yyyyMMdd") : versionFromSrc
println("Mod version is: ${version}")
group = property("group").toString()
archivesBaseName = property("archivesBaseName").toString()


ngtlibModName = property("ngtlibModName").toString()
ngtlibProjectID = property("ngtlibProjectID").toString()
ngtlibFileID = property("ngtlibFileID").toString()

rtmModName = property("rtmModName").toString()
rtmProjectID = property("rtmProjectID").toString()
rtmFileID = property("rtmFileID").toString()

jarLibList = property("jarLibList").toString()

//sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

sourceCompatibility = targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.
compileJava {
    sourceCompatibility = targetCompatibility = '1.8'
}

minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   Snapshot are built nightly.
    // stable_#            Stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    //mappings channel: 'snapshot', version: '20171003-1.12'
    mappings channel: 'stable', version: '39-1.12'
    accessTransformer = file('src/main/resources/META-INF/rtmmetro_at.cfg')
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')
            property 'mixin.env.disableRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
            jvmArgs '-Dfml.coreMods.load=net.cacpixel.rtmmetro.asm.RTMMetroCoreMod'
        }

        server {

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
        }
    }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.12.2-14.23.5.2852'
//    implementation ("net.minecraftforge:mergetool:0.2.3.3") { force = true }
    implementation fg.deobf("net.minecraftforge:mergetool:0.2.3.3:forge") { force = true }
    compileOnly(fileTree(dir: 'run/mods', includes: ['aa_do_not_rename_OptiFineDevTweaker-*.jar']))
    compileOnly(fileTree(dir: 'lib', includes: ['*.jar']))
    //-Dlegacy.debugClassLoadingSave=true
    //-Dlegacy.debugClassLoading=true
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
    annotationProcessor 'org.ow2.asm:asm-debug-all:5.2'
    annotationProcessor 'com.google.guava:guava:32.1.2-jre'
    annotationProcessor 'com.google.code.gson:gson:2.8.9'

    implementation('zone.rong:mixinbooter:9.3') {
        transitive = false
    }
    annotationProcessor('zone.rong:mixinbooter:9.3') {
        transitive = false
    }

    implementation fg.deobf('curse.maven' + ':' +
            ngtlibModName + '-' +
            ngtlibProjectID + ':' +
            ngtlibFileID)
    implementation fg.deobf('curse.maven' + ':' +
            rtmModName + '-' +
            rtmProjectID + ':' +
            rtmFileID)
    implementation 'com.formdev:flatlaf:3.5.1'
    implementation 'com.miglayout:miglayout-swing:5.3'
    // For more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html
}

task buildNativeWin32amd64(group: 'build') {
//    dependsOn("sourceApiJava")
    doFirst {
        def out = new ByteArrayOutputStream()
        exec {
            ExecSpec execSpec ->
                executable 'mingw32-make'
                args 'all'
                workingDir("./rxtx/build")
                standardOutput = out
        }
        println(out.toString())
    }
}

task copyNative(type: Copy, group: 'build') {
//    dependsOn('buildNative')
    from(file('rxtx/build')) {
        include('rxtxSerial.dll')
    }
    destinationDir = file('src/main/resources/win32-x86-64')
}

task copyNativeToMCrun(type: Copy, group: 'build') {
//    dependsOn('buildNative')
    from(file('rxtx/build')) {
        include('**rxtxSerial.*')
    }
    destinationDir = file('run/librxtx')
}

task cleanNative(type: Delete, group: 'build') {
    doFirst {
        delete('rxtx/build/gnu')
        FileTree tree = fileTree(dir: 'rxtx/build')
        tree.each { File file ->
            if (file.toString().contains(".o") || file.toString().contains(".h") || file.toString().contains(".jar")) {
                delete file
            }
        }
    }
}

task extractRTMResource(type: Copy, group: 'build') {
    File assets = new File('src/main/resources/assets/rtm')
    if (!assets.isDirectory()) {
        File tmp = new File('build/tmp/expandedArchives')
        if (tmp.exists()) {
            tmp.delete()
        }
        String classPath = System.getProperty("java.class.path")
        String gradleCachePath = classPath.replaceAll('\\\\', "/").split("/wrapper")[0]
        println("Gradle home is:" + gradleCachePath)
        String cursePathStr = "/caches/forge_gradle/deobf_dependencies/curse/maven"
        File cursePath = new File(gradleCachePath + cursePathStr)
        fileTree(dir: cursePath).each {
            if (it.getName().toString() == ngtlibModName + '-' + ngtlibProjectID + '-' + ngtlibFileID + "_mapped_stable_39-1.12" + ".jar"
                    || it.getName().toString() == rtmModName + '-' + rtmProjectID + '-' + rtmFileID + "_mapped_stable_39-1.12" + ".jar") {
                println("Found jar file: " + it.toString())
                zipTree(it).each {}
            }
        }
        for (File file : tmp.listFiles()) {
            if (file.getName().toString().contains(ngtlibModName + '-' + ngtlibProjectID + '-' + ngtlibFileID + "_mapped_stable_39-1.12" + ".jar")
                    || file.getName().toString().contains(rtmModName + '-' + rtmProjectID + '-' + rtmFileID + "_mapped_stable_39-1.12" + ".jar")) {
                if (!file.isDirectory()) continue
                println("Found dir: " + file.toString())
                String path = file.getCanonicalPath() + "/assets"
                from(path)
            }
        }
    } else {
        println("RTM Resources ok.")
    }
    destinationDir = file('src/main/resources/assets')
}

sourceSets {
    main {
        output.resourcesDir = java.outputDir
        output.resourcesDir = file('build/combined')
        java.outputDir = file('build/combined')
        java.srcDirs += ['rxtx/src']
    }
}

jar {
    dependsOn('copyNative')
    manifest {
        attributes([
                "Specification-Title"        : "RTMMetro",
                "Specification-Vendor"       : "CacPixel",
                "Specification-Version"      : "1", // We are version 1 of ourselves
                "Implementation-Title"       : project.name,
                "Implementation-Version"     : "${project.version}",
                "Implementation-Vendor"      : "cacpixel",
                "Implementation-Timestamp"   : new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                'FMLCorePlugin'              : "net.cacpixel.rtmmetro.asm.RTMMetroCoreMod", //-Dfml.coreMods.load=net.cacpixel.rtmmetro.asm.RTMMetroCoreMod
                'FMLCorePluginContainsFMLMod': true,
                'FMLAT'                      : "rtmmetro_at.cfg"
        ])
    }
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from sourceSets.main.resources.srcDirs
    exclude 'assets/rtm/**'
    exclude 'assets/ngtlib/**'
    exclude 'assets/minecraft/**'
    exclude 'assets/hoge/**'
    exclude 'rtm/**'
    exclude 'dummyThing'

    String classPath = System.getProperty("java.class.path")
    String gradleCachePath = classPath.replaceAll('\\\\', "/").split("/wrapper")[0]
    String libPath = new File(gradleCachePath + "\\caches\\modules-2\\files-2.1")
    fileTree(dir: libPath).each { file ->
        jarLibList.split(",").toList().forEach { str ->
            if (file.getName() == str.trim()) {
                println("Add jar dependency to artifact: " + file.toString())
                from { project.zipTree(file.toString()) }
            }
        }
    }

//    String runtimePath = ''
//    configurations.runtime.each { runtimePath = runtimePath + " rxtx//" + it.name } // 本地lib
//    from {
//        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
//        // implementation 相关的引入解压并打包入新的jar中
//    }
}

jar.finalizedBy('reobfJar')

//sourceJar {
//    from sourceSets.main.resources.srcDirs
//    exclude 'assets/rtm/**'
//    exclude 'assets/ngtlib/**'
//    exclude 'assets/minecraft/**'
//    exclude 'assets/hoge/**'
//    exclude 'rtm/**'
//}

clean {
    dependsOn('cleanNative')
}

compileJava {
    dependsOn('copyNative')
    dependsOn('copyNativeToMCrun')
}

processResources {
    dependsOn('extractRTMResource')
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    filesMatching("mcmod.info") {
        expand([
                "modId"      : modId,
                "modName"    : modName,
                "version"    : version,
                "description": modDescription,
                "mcversion"  : mcversion,
                "cursePage"  : cursePage
        ])
    }
}

tasks.withType(JavaCompile) {
    options.encoding = "utf-8"
}
tasks.withType(Javadoc) {
    options.encoding = "utf-8"
}
